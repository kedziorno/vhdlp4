; CRC Calculation used KCPSM3 8-bit Microcontroller (PicoBlaze) - Page: 284,285
; Alternatively commented C text with adequate Assembler code
;
; main(argc,argv)
; int argc;
; char *argv[];
; {
;   int i,data_count;
;   unsigned int crc,data_in;
;   unsigned char crc_bit[32],new_bit[32];
CONSTANT crccalc_output_0, 02; OUTPUT 7-0 bit
CONSTANT crccalc_output_1, 04; OUTPUT 15-8 bit
CONSTANT crccalc_output_2, 08; OUTPUT 23-16 bit
CONSTANT crccalc_output_3, 10; OUTPUT 31-24 bit
CONSTANT in_data_in_0, 02; INPUT 7-0 bit
CONSTANT in_data_in_1, 04; INPUT 15-8 bit
CONSTANT in_data_in_2, 08; INPUT 23-16 bit
CONSTANT in_data_in_3, 10; INPUT 31-24 bit
NAMEREG s0, data_in_0; data_in 7-0 bit
NAMEREG s1, data_in_1; data_in 15-8 bit
NAMEREG s2, data_in_2; data_in 23-16 bit
NAMEREG s3, data_in_3; data_in 31-24 bit
NAMEREG s4, crc_bit_0; current CRC 7-0 bit
NAMEREG s5, crc_bit_1; current CRC 15-8 bit
NAMEREG s6, crc_bit_2; current CRC 23-16 bit
NAMEREG s7, crc_bit_3; current CRC 31-24 bit
NAMEREG s8, new_bit_0; next CRC 7-0 bit
NAMEREG s9, new_bit_1; next CRC 15-8 bit
NAMEREG sA, new_bit_2; next CRC 23-16 bit
NAMEREG sB, new_bit_3; next CRC 31-24 bit
NAMEREG sC, temp0;
NAMEREG sD, temp1;
NAMEREG sE, temp2;
NAMEREG sF, loop_count;
;   crc = 0x52325032;
CONSTANT constant_crc_bit_0, 32;
CONSTANT constant_crc_bit_1, 50;
CONSTANT constant_crc_bit_2, 32;
CONSTANT constant_crc_bit_3, 52;
;   data_count = 0;
;   while (scanf(" 0x%8x", &data_in) == 1) {
;     data_count++;
ADDRESS 000; Programs always start at reset vector 0
BEGIN:
;     /* Add the data_in value to the current value of the CRC held in the */
;     /* "register". The addition is performed modulo two (XOR). */
;     crc ^= data_in;
INPUT data_in_0, in_data_in_0;
INPUT data_in_1, in_data_in_1;
INPUT data_in_2, in_data_in_2;
INPUT data_in_3, in_data_in_3;
LOAD crc_bit_0, data_in_0;
XOR crc_bit_0, constant_crc_bit_0;
LOAD crc_bit_1, data_in_1;
XOR crc_bit_1, constant_crc_bit_1;
LOAD crc_bit_2, data_in_2;
XOR crc_bit_2, constant_crc_bit_2;
LOAD crc_bit_3, data_in_3;
XOR crc_bit_3, constant_crc_bit_3;
;     /* Expand the value of the CRC held in the register to 32 individual */
;     /* bits for easy manipulation. */
;     for (i = 0; i < 32; ++i) {
;       crc_bit[i] = (crc >> i) & 0x01;
;     }
;     /* The following 32 assignments perform the function of the box */
;     /* labeled "*" in the block diagram above. The new_bit array is a */
;     /* temporary holding place for the new CRC value being calculated. */
;     /* Note that there are lots of shared terms in the assignments below. */
;     new_bit[31] = crc_bit[31] ^ crc_bit[30] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[15] ^ crc_bit[11] ^ crc_bit [9] ^ crc_bit [8] ^ crc_bit[5];
crc_bit_31_31:
  LOAD temp0, crc_bit_3;
  ;AND temp0, 80; -- 31
  LOAD loop_count, 07;
  shift_right_31_1:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_1;
crc_bit_31_30:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 40; -- 30
  LOAD loop_count, 06;
  shift_right_31_2:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_2;
  XOR temp0, temp1; -- 31 ^ 30
crc_bit_31_29:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 20; -- 29
  LOAD loop_count, 05;
  shift_right_31_3:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_3;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29
crc_bit_31_28:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 10; -- 28
  LOAD loop_count, 04;
  shift_right_31_4:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_4;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28
crc_bit_31_27:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 08; -- 27
  LOAD loop_count, 03;
  shift_right_31_5:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_5;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27
crc_bit_31_25:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 02; -- 25
  SR0 temp1;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25
crc_bit_31_24:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 01; -- 24
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24
crc_bit_31_23:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 80; -- 23
  LOAD loop_count, 07;
  shift_right_31_6:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_6;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23
crc_bit_31_15:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 80; -- 15
  LOAD loop_count, 07;
  shift_right_31_7:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_7;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23 ^ 15
crc_bit_31_11:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 08; -- 11
  LOAD loop_count, 03;
  shift_right_31_8:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_8;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23 ^ 15 ^ 11
crc_bit_31_9:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 02; -- 9
  SR0 temp1;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23 ^ 15 ^ 11 ^ 9
crc_bit_31_8:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 01; -- 8
  SR0 temp1;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23 ^ 15 ^ 11 ^ 9 ^ 8
crc_bit_31_5:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 20; -- 5
  LOAD loop_count, 04;
  shift_right_31_9:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_9;
  XOR temp0, temp1; -- 31 ^ 30 ^ 29 ^ 28 ^ 27 ^ 25 ^ 24 ^ 23 ^ 15 ^ 11 ^ 9 ^ 8 ^ 5
crc_index_31:
  LOAD loop_count, 07;
  shift_right_31_10:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_31_10;
  OR new_bit_3, temp0; -- X0000000 00000000 00000000 00000000
;     new_bit[30] = crc_bit[30] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[14] ^ crc_bit[10] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit[4];
crc_bit_30_30:
  LOAD temp0, crc_bit_3;
  ;AND temp0, 40; -- 30 , 01000000
  LOAD loop_count, 06;
  shift_right_30_1:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_1;
crc_bit_30_29:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 20; -- 29 , 00100000
  LOAD loop_count, 05;
  shift_right_30_2:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_2;
  XOR temp0, temp1; -- 30 ^ 29
crc_bit_30_28:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 10; -- 28 , 00010000
  LOAD loop_count, 04;
  shift_right_30_3:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_3;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28
crc_bit_30_27:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 08; -- 27 , 00001000
  LOAD loop_count, 03;
  shift_right_30_4:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_4;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27
crc_bit_30_26:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 04; -- 26 , 00000100
  LOAD loop_count, 02;
  shift_right_30_5:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_5;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26
crc_bit_30_24:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 01; -- 24 , 00000001
  SR0 temp1;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24
crc_bit_30_23:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 80; -- 23 , 10000000
  LOAD loop_count, 07;
  shift_right_30_6:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_6;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23
crc_bit_30_22:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 40; -- 22 , 01000000
  LOAD loop_count, 06;
  shift_right_30_7:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_7;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22
crc_bit_30_14:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 40; -- 14 , 01000000
  LOAD loop_count, 06;
  shift_right_30_8:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_8;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22 ^ 14
crc_bit_30_10:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 04; -- 10 , 00000100
  LOAD loop_count, 02;
  shift_right_30_9:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_9;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22 ^ 14 ^ 10
crc_bit_30_8:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 01; -- 8 , 00000001
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22 ^ 14 ^ 10 ^ 8
crc_bit_30_7:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 80; -- 7 , 10000000
  LOAD loop_count, 07;
  shift_right_30_10:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_10;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22 ^ 14 ^ 10 ^ 8 ^ 7
crc_bit_30_4:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 10; -- 4 , 00010000
  LOAD loop_count, 04;
  shift_right_30_11:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_11;
  XOR temp0, temp1; -- 30 ^ 29 ^ 28 ^ 27 ^ 26 ^ 24 ^ 23 ^ 22 ^ 14 ^ 10 ^ 8 ^ 7 ^ 4
crc_index_30:
  LOAD loop_count, 06;
  shift_right_30_12:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_30_12;
  OR new_bit_3, temp0; -- XX000000 00000000 00000000 00000000
;     new_bit[29] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[13] ^ crc_bit [9] ^ crc_bit [7] ^ crc_bit[6] ^ crc_bit[3];
crc_bit_29_31:
  LOAD temp0, crc_bit_3;
  ;AND temp0, 80; -- 31 , 10000000
  LOAD loop_count, 07;
  shift_right_29_1:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_1;
crc_bit_29_29:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 20; -- 29 , 00100000
  LOAD loop_count, 05;
  shift_right_29_2:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_2;
  XOR temp0, temp1; -- 31 ^ 29
crc_bit_29_28:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 10; -- 28 , 00010000
  LOAD loop_count, 04;
  shift_right_29_3:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_3;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28
crc_bit_29_27:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 08; -- 27 , 00001000
  LOAD loop_count, 03;
  shift_right_29_4:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_4;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27
crc_bit_29_26:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 40; -- 26 , 00000100
  LOAD loop_count, 02;
  shift_right_29_5:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_5;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26
crc_bit_29_25:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 20; -- 25 , 00000010
  LOAD loop_count, 01;
  shift_right_29_6:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_6;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25
crc_bit_29_23:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 80; -- 23 , 10000000
  LOAD loop_count, 07;
  shift_right_29_7:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_7;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23
crc_bit_29_22:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 40; -- 22 , 01000000
  LOAD loop_count, 06;
  shift_right_29_8:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_8;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22
crc_bit_29_21:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 20; -- 21 , 00100000
  LOAD loop_count, 05;
  shift_right_29_9:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_9;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21
crc_bit_29_13:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 20; -- 13 , 00100000
  LOAD loop_count, 05;
  shift_right_29_10:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_10;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21 ^ 13
crc_bit_29_9:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 20; -- 9 , 00000010
  LOAD loop_count, 01;
  shift_right_29_11:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_11;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21 ^ 13 ^ 9
crc_bit_29_7:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 80; -- 7 , 10000000
  LOAD loop_count, 07;
  shift_right_29_12:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_12;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21 ^ 13 ^ 9 ^ 7
crc_bit_29_6:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 40; -- 6 , 01000000
  LOAD loop_count, 06;
  shift_right_29_13:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_13;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21 ^ 13 ^ 9 ^ 7 ^ 6
crc_bit_29_3:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 08; -- 3 , 00001000
  LOAD loop_count, 03;
  shift_right_29_14:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_14;
  XOR temp0, temp1; -- 31 ^ 29 ^ 28 ^ 27 ^ 26 ^ 25 ^ 23 ^ 22 ^ 21 ^ 13 ^ 9 ^ 7 ^ 6 ^ 3
crc_index_29:
  LOAD loop_count, 05;
  shift_right_29_15:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_29_15;
  OR new_bit_3, temp0; -- XXX00000 00000000 00000000 00000000
;     new_bit[28] = crc_bit[30] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[12] ^ crc_bit [8] ^ crc_bit [6] ^ crc_bit[5] ^ crc_bit[2];
crc_bit_28_30:
  LOAD temp0, crc_bit_3;
  ;AND temp0, 40; -- 30 , 01000000
  LOAD loop_count, 06;
  shift_right_28_1:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_1;
crc_bit_28_28:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 20; -- 28 , 00010000
  LOAD loop_count, 04;
  shift_right_28_2:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_2;
  XOR temp0, temp1; -- 30 ^ 28
crc_bit_28_27:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 08; -- 27 , 00001000
  LOAD loop_count, 03;
  shift_right_28_3:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_3;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27
crc_bit_28_26:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 04; -- 26 , 00000100
  LOAD loop_count, 02;
  shift_right_28_4:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_4;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26
crc_bit_28_25:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 02; -- 25 , 00000010
  LOAD loop_count, 01;
  shift_right_28_5:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_5;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25
crc_bit_28_24:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 01; -- 24 , 00000001
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24
crc_bit_28_22:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 40; -- 22 , 01000000
  LOAD loop_count, 06;
  shift_right_28_7:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_7;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22
crc_bit_28_21:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 20; -- 21 , 00100000
  LOAD loop_count, 05;
  shift_right_28_8:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_8;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21
crc_bit_28_20:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 10; -- 20 , 00010000
  LOAD loop_count, 05;
  shift_right_28_9:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_9;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20
crc_bit_28_12:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 10; -- 12 , 00010000
  LOAD loop_count, 04;
  shift_right_28_10:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_10;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20 ^ 12
crc_bit_28_8:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 01; -- 8 , 00000001
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20 ^ 12 ^ 8
crc_bit_28_6:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 40; -- 6 , 01000000
  LOAD loop_count, 06;
  shift_right_28_12:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_12;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20 ^ 12 ^ 8 ^ 6
crc_bit_28_5:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 20; -- 5 , 00100000
  LOAD loop_count, 05;
  shift_right_28_13:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_13;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20 ^ 12 ^ 8 ^ 6 ^ 5
crc_bit_28_2:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 20; -- 2 , 00000100
  LOAD loop_count, 02;
  shift_right_28_14:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_14;
  XOR temp0, temp1; -- 30 ^ 28 ^ 27 ^ 26 ^ 25 ^ 24 ^ 22 ^ 21 ^ 20 ^ 12 ^ 8 ^ 6 ^ 5 ^ 2
crc_index_28:
  LOAD loop_count, 04;
  shift_right_28_15:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_28_15;
  OR new_bit_3, temp0; -- XXXX0000 00000000 00000000 00000000
;     new_bit[27] = crc_bit[29] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[11] ^ crc_bit [7] ^ crc_bit [5] ^ crc_bit[4] ^ crc_bit[1];
crc_bit_27_29:
  LOAD temp0, crc_bit_3;
  ;AND temp0, 40; -- 29 , 00100000
  LOAD loop_count, 05;
  shift_right_27_1:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_1;
crc_bit_27_27:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 08; -- 27 , 00001000
  LOAD loop_count, 03;
  shift_right_27_2:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_2;
  XOR temp0, temp1; -- 29 ^ 27
crc_bit_27_26:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 04; -- 26 , 00000100
  LOAD loop_count, 02;
  shift_right_27_3:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_3;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26
crc_bit_27_25:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 02; -- 25 , 00000010
  LOAD loop_count, 01;
  shift_right_27_4:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_4;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25
crc_bit_27_24:
  LOAD temp1, crc_bit_3;
  ;AND temp1, 01; -- 24 , 00000001
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24
crc_bit_27_23:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 80; -- 23 , 10000000
  LOAD loop_count, 07;
  shift_right_27_6:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_6;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23
crc_bit_27_21:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 20; -- 21 , 00100000
  LOAD loop_count, 05;
  shift_right_27_7:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_7;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21
crc_bit_27_20:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 10; -- 20 , 00010000
  LOAD loop_count, 04;
  shift_right_27_8:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_8;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20
crc_bit_27_19:
  LOAD temp1, crc_bit_2;
  ;AND temp1, 08; -- 19 , 00001000
  LOAD loop_count, 03;
  shift_right_27_9:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_9;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19
crc_bit_27_11:
  LOAD temp1, crc_bit_1;
  ;AND temp1, 08; -- 11 , 00001000
  LOAD loop_count, 03;
  shift_right_27_10:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_10;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19 ^ 11
crc_bit_27_7:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 80; -- 7 , 10000000
  LOAD loop_count, 03;
  shift_right_27_11:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_11;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19 ^ 11 ^ 7
crc_bit_27_5:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 20; -- 5 , 00100000
  LOAD loop_count, 05;
  shift_right_27_12:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_12;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19 ^ 11 ^ 7 ^ 5
crc_bit_27_4:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 10; -- 4 , 00010000
  LOAD loop_count, 04;
  shift_right_27_13:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_13;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19 ^ 11 ^ 7 ^ 5 ^ 4
crc_bit_27_1:
  LOAD temp1, crc_bit_0;
  ;AND temp1, 02; -- 1 , 00000010
  LOAD loop_count, 01;
  shift_right_27_14:
    SR0 temp1;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_14;
  XOR temp0, temp1; -- 29 ^ 27 ^ 26 ^ 25 ^ 24 ^ 23 ^ 21 ^ 20 ^ 19 ^ 11 ^ 7 ^ 5 ^ 4 ^ 1
crc_index_27:
  LOAD loop_count, 03;
  shift_right_27_15:
    SR0 temp0;
    SUB loop_count, 01;
    TEST loop_count, 00;
    JUMP NZ, shift_right_27_15;
  OR new_bit_3, temp0; -- XXXXX000 00000000 00000000 00000000

;     new_bit[26] = crc_bit[31] ^ crc_bit[28] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[10] ^ crc_bit [6] ^ crc_bit[4] ^ crc_bit[3] ^ crc_bit[0];
;     new_bit[25] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[15] ^ crc_bit[11] ^ crc_bit [8] ^ crc_bit [3] ^ crc_bit[2];
;     new_bit[24] = crc_bit[30] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[14] ^ crc_bit[10] ^ crc_bit [7] ^ crc_bit [2] ^ crc_bit[1];
;     new_bit[23] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[15] ^ crc_bit[13] ^ crc_bit [9] ^ crc_bit [6] ^ crc_bit[1] ^ crc_bit[0];
;     new_bit[22] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[16] ^ crc_bit[14] ^ crc_bit[12] ^ crc_bit[11] ^ crc_bit[9] ^ crc_bit[0];
;     new_bit[21] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[22] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[13] ^ crc_bit[10] ^ crc_bit [9] ^ crc_bit [5];
;     new_bit[20] = crc_bit[30] ^ crc_bit[28] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[23] ^ crc_bit[21] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[12] ^ crc_bit [9] ^ crc_bit [8] ^ crc_bit [4];
;     new_bit[19] = crc_bit[29] ^ crc_bit[27] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[22] ^ crc_bit[20] ^ crc_bit[16] ^ crc_bit[15] ^ crc_bit[11] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit [3];
;     new_bit[18] = crc_bit[31] ^ crc_bit[28] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[21] ^ crc_bit[19] ^ crc_bit[15] ^ crc_bit[14] ^ crc_bit[10] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit[2];
;     new_bit[17] = crc_bit[31] ^ crc_bit[30] ^ crc_bit[27] ^ crc_bit[25] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[20] ^ crc_bit[18] ^ crc_bit[14] ^ crc_bit[13] ^ crc_bit [9] ^ crc_bit [6] ^ crc_bit[5] ^ crc_bit[1];
;     new_bit[16] = crc_bit[30] ^ crc_bit[29] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[19] ^ crc_bit[17] ^ crc_bit[13] ^ crc_bit[12] ^ crc_bit [8] ^ crc_bit [5] ^ crc_bit[4] ^ crc_bit[0];
;     new_bit[15] = crc_bit[30] ^ crc_bit[27] ^ crc_bit[24] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[18] ^ crc_bit[16] ^ crc_bit[15] ^ crc_bit[12] ^ crc_bit [9] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit[5] ^ crc_bit[4] ^ crc_bit[3];
;     new_bit[14] = crc_bit[29] ^ crc_bit[26] ^ crc_bit[23] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[17] ^ crc_bit[15] ^ crc_bit[14] ^ crc_bit[11] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit[4] ^ crc_bit[3] ^ crc_bit[2];
;     new_bit[13] = crc_bit[31] ^ crc_bit[28] ^ crc_bit[25] ^ crc_bit[22] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[16] ^ crc_bit[14] ^ crc_bit[13] ^ crc_bit[10] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit[5] ^ crc_bit[3] ^ crc_bit[2] ^ crc_bit[1];
;     new_bit[12] = crc_bit[31] ^ crc_bit[30] ^ crc_bit[27] ^ crc_bit[24] ^ crc_bit[21] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[15] ^ crc_bit[13] ^ crc_bit[12] ^ crc_bit [9] ^ crc_bit [6] ^ crc_bit[5] ^ crc_bit[4] ^ crc_bit[2] ^ crc_bit[1] ^ crc_bit[0];
;     new_bit[11] = crc_bit[31] ^ crc_bit[28] ^ crc_bit[27] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[20] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[15] ^ crc_bit[14] ^ crc_bit[12] ^ crc_bit[9] ^ crc_bit[4] ^ crc_bit[3] ^ crc_bit[1] ^ crc_bit[0];
;     new_bit[10] = crc_bit[31] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[26] ^ crc_bit[19] ^ crc_bit[16] ^ crc_bit[14] ^ crc_bit[13] ^ crc_bit [9] ^ crc_bit [5] ^ crc_bit [3] ^ crc_bit [2] ^ crc_bit[0];
;     new_bit[9]  = crc_bit[29] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[18] ^ crc_bit[13] ^ crc_bit[12] ^ crc_bit[11] ^ crc_bit [9] ^ crc_bit [5] ^ crc_bit [4] ^ crc_bit [2] ^ crc_bit [1];
;     new_bit[8]  = crc_bit[31] ^ crc_bit[28] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[17] ^ crc_bit[12] ^ crc_bit[11] ^ crc_bit[10] ^ crc_bit [8] ^ crc_bit [4] ^ crc_bit [3] ^ crc_bit [1] ^ crc_bit[0];
;     new_bit[7]  = crc_bit[29] ^ crc_bit[28] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[23] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[16] ^ crc_bit[15] ^ crc_bit[10] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit[5] ^ crc_bit[3] ^ crc_bit[2] ^ crc_bit[0];
;     new_bit[6]  = crc_bit[30] ^ crc_bit[29] ^ crc_bit[25] ^ crc_bit[22] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[14] ^ crc_bit[11] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit [5] ^ crc_bit[4] ^ crc_bit[2] ^ crc_bit[1];
;     new_bit[5]  = crc_bit[29] ^ crc_bit[28] ^ crc_bit[24] ^ crc_bit[21] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[13] ^ crc_bit[10] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit [5] ^ crc_bit [4] ^ crc_bit[3] ^ crc_bit[1] ^ crc_bit[0];
;     new_bit[4]  = crc_bit[31] ^ crc_bit[30] ^ crc_bit[29] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[20] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[15] ^ crc_bit[12] ^ crc_bit[11] ^ crc_bit [8] ^ crc_bit[6] ^ crc_bit[4] ^ crc_bit[3] ^ crc_bit[2] ^ crc_bit[0];
;     new_bit[3]  = crc_bit[31] ^ crc_bit[27] ^ crc_bit[25] ^ crc_bit[19] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[15] ^ crc_bit[14] ^ crc_bit[10] ^ crc_bit [9] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit[3] ^ crc_bit[2] ^ crc_bit[1];
;     new_bit[2]  = crc_bit[31] ^ crc_bit[30] ^ crc_bit[26] ^ crc_bit[24] ^ crc_bit[18] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[14] ^ crc_bit[13] ^ crc_bit [9] ^ crc_bit [8] ^ crc_bit [7] ^ crc_bit[6] ^ crc_bit[2] ^ crc_bit[1] ^ crc_bit[0];
;     new_bit[1]  = crc_bit[28] ^ crc_bit[27] ^ crc_bit[24] ^ crc_bit[17] ^ crc_bit[16] ^ crc_bit[13] ^ crc_bit[12] ^ crc_bit[11] ^ crc_bit [9] ^ crc_bit [7] ^ crc_bit [6] ^ crc_bit [1] ^ crc_bit[0];
;     new_bit[0]  = crc_bit[31] ^ crc_bit[30] ^ crc_bit[29] ^ crc_bit[28] ^ crc_bit[26] ^ crc_bit[25] ^ crc_bit[24] ^ crc_bit[16] ^ crc_bit[12] ^ crc_bit[10] ^ crc_bit [9] ^ crc_bit [6] ^ crc_bit[0];

OUTPUT new_bit_3, crccalc_output_0;
OUTPUT new_bit_3, crccalc_output_1;
OUTPUT new_bit_3, crccalc_output_2;
OUTPUT new_bit_3, crccalc_output_3;

;OUTPUT crc_bit_0, crccalc_output_0; Debug - OUTPUT OK
;OUTPUT crc_bit_1, crccalc_output_1; Debug - OUTPUT OK
;OUTPUT crc_bit_2, crccalc_output_2; Debug - OUTPUT OK
;OUTPUT crc_bit_3, crccalc_output_3; Debug - OUTPUT OK

;     /* The new CRC value has been calculated as individual bits in the */
;     /* new_bit array. Re-assembled it into a 32 bit value and "clock" it */
;     /* into the "register". */
;     crc = 0;
;     for (i = 31; i >= 0; --i) {
;       crc = crc << 1;
;       crc |= new_bit[i];
;     }
;     printf("Running CRC value is 0x%08X\n", crc);
;   }
;   printf("\n\nThe total number of data words processed was %d\n", data_count);
;   printf("The CRC is 0x%08X\n\n", crc);
;   return 0;
; }
;
; The following is the sample data used as input for the example stored in file sample:
; 0x00308027
; 0xE1234567
; 0x00000000
; 0x00000002
; 0x00000000
; Executing the command ./crc < sample yields the following output:
; Running CRC value is 0x11E353FD
; Running CRC value is 0x0F656DA7
; Running CRC value is 0x3D14369C
; Running CRC value is 0x92D0D681
; Running CRC value is 0x319FFF6F
; The total number of data words processed was 5
; The CRC is 0x319FFF6F
; ROM output file is always called
; <filename>.vhd
; ISR: ; An Interrupt Service Routine (ISR) is
; required if using interrupts
; Interrupts are automatically disabled
; when an interrupt is recognized
; Never re-enable interrupts during the ISR
; RETURNI ENABLE ; Return from interrupt service routine
; Use RETURNI DISABLE to leave interrupts
; disabled
;ADDRESS 3FF ; Interrupt vector is located at highest
; instruction address
;JUMP ISR ; Jump to interrupt service routine, ISR
